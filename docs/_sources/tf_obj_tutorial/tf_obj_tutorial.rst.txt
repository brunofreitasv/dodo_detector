TensorFlow Object Detection Model Training
==========================================

This is a summary of `this nice
tutorial <https://medium.com/towards-data-science/how-to-train-your-own-object-detector-with-tensorflows-object-detector-api-bec72ecfe1d9>`__.

1. `Install TensorFlow <https://www.tensorflow.org/install/>`__.

2. Download the TensorFlow `models repository <https://github.com/tensorflow/models>`__.

Annotating the dataset
----------------------

1. Install `labelImg <https://github.com/tzutalin/labelImg>`__. This is
   a Python package, you can install via pip, but the one from GitHub is
   better. It saves annotations in the PASCAL VOC format.

2. Annotate your dataset using labelImg.

3. Use `this script <https://github.com/datitran/raccoon_dataset/blob/master/xml_to_csv.py>`__
   to convert the XML files generated by labelImg into a single CSV
   file.

4. Separate the CSV file into two, one with training examples and one
   with evaluation examples. Images should be selected randomly, making
   sure that objects from all classes are present in both of them. The
   usual proportions are 75 to 80% training and the rest to the
   evaluation dataset.

5. Use `this script <https://github.com/datitran/raccoon_dataset/blob/master/generate_tfrecord.py>`__
   to convert the two CSV files (eg. train.csv and eval.csv) into
   TFRecord files (eg. train.record and eval.record), the data format
   TensorFlow is most familiar with.

Traversing the text file hell...
--------------------------------

6. Create a label map, like `one of these <https://github.com/tensorflow/models/tree/master/research/object_detection/data>`__.
   Make sure class numbers are exactly the ones that were used when
   creating the TFRecords.

7. Download one of the neural network models provided in `this page <https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/detection_model_zoo.md>`__.
   The ones trained in the MSCoco dataset are the best ones, since they
   were also trained on objects.

8. Provide a training pipeline, which is a ``config`` that usually comes
   in the tar.gz file downloaded in the last step. If they donâ€™t, they
   can be found
   `here <https://github.com/tensorflow/models/tree/master/research/object_detection/samples/configs>`__
   (they need some tweaking before using, for example, changing number
   of classes). A tutorial on how to create your own
   `here <https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/configuring_jobs.md>`__.

   -  The pipeline config file has some fields that must be adjusted before
      training is started. Its header describes which ones. Usually, they
      are the fields that point to the label map, the training and
      evaluation directories and the neural network checkpoint. In case you
      downloaded one of the models provided in `this page <https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/detection_model_zoo.md>`__,
      you should untar the ``tar.gz`` file and point the checkpoint path
      inside the pipeline config file to the "untarred" directory of the
      model (see `this answer <https://stackoverflow.com/a/45363576/1245214>`__ for help).

   -  You should also check the number of classes. MSCoco has 90 classes,
      but your problem may have more or less.

Training the network
--------------------

1. Train the model.
   `This is how you do it locally <https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/running_locally.md>`__.
   **Optional:** in order to check training progress, TensorBoard can be
   started pointing its ``--logdir`` to the ``--train_dir`` of
   object_detection/train.py.

2. Export the network, like
   `this <https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/exporting_models.md>`__.

3. Use the exported ``.pb`` in your object detector.

Tips
----

In the *data augmentation* section of the training pipeline, some
options can be added or removed to try and make the training better.
Some of the options are listed
`here <https://stackoverflow.com/a/46901051>`__
